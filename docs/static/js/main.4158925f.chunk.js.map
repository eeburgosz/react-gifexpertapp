{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,8BACI,sBAAMC,SAdO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,MASd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCRlBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DAEZC,EAFY,0FAE4EC,UAAUH,GAFtF,sBAGAI,MAAMF,GAHN,cAGZG,EAHY,gBAIEA,EAAKC,OAJP,uBAIXC,EAJW,EAIXA,KAEDC,EAAMD,EAAKE,KAAI,SAAAC,GAEjB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,gBAAgBZ,QAXtB,kBAcXM,GAdW,4CAAF,sDCIPO,G,MAAc,SAAC,GAAkB,IAAjBb,EAAgB,EAAhBA,IAAKU,EAAW,EAAXA,MAI9B,OACI,sBAAKI,UAAU,0CAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,SCNFO,EAAU,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,SAErB,ECJuB,SAACA,GAExB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPxB,EAAQC,GAAUwB,MAAM,SAAAC,GACpBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAGT,CAACpB,IAEIqB,EDfuBM,CAAa3B,GAApCoB,EAAP,EAAOA,QAAcP,EAArB,EAAgBN,KAKhB,OACI,gCACI,oBAAIS,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,wCACR,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aEjB5BiB,EAAe,WAGxB,MAAoC1C,mBAAS,IAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI4C,EAAWpB,KAAI,SAACT,GAAD,OAGX,aAFA,CAEC,EAAD,CAEIA,SAAUA,GADLA,YCTd8B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,SAG5BX,M","file":"static/js/main.4158925f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handlerInputChange= (e) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handlerSubmit= (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 1){\r\n            setCategories(cats=> [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }   \r\n\r\n        \r\n        //console.log('Submit hecho')\r\n    }    \r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handlerSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handlerInputChange}></input>\r\n                </form>\r\n        </div>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs= async(category) => {\r\n        \r\n    const url= `https://api.giphy.com/v1/gifs/search?api_key=7xO5jHk9dYrGRAJnL2Q8EPOFY8bxpizC&q=${encodeURI(category)}&limit=15`;\r\n    const resp= await fetch(url);\r\n    const {data}= await resp.json();\r\n    //console.log(data);\r\n    const gifs= data.map(img => {\r\n        //console.log(img);\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_large.url\r\n        }\r\n    });\r\n    return gifs;\r\n    \r\n};","import React from 'react';\r\nimport \"animate.css\";\r\n\r\n\r\nexport const GifGridItem = ({url, title}) => {\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInX\">\r\n           <img src={url} alt={title} />\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category} ) => {  //-----> El 'category' del 'map' que me trae imagen por imagen.\r\n\r\n    const {loading, data:images}= useFetchGifs(category);    \r\n    //const [images, setImages] = useState([]);\r\n\r\n    //console.log(data)\r\n    \r\n    return (\r\n        <div>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p>Loading</p>}\r\n                <div className=\"card-grid\">\r\n                    {\r\n                        images.map(img => (\r\n                        \r\n                            <GifGridItem \r\n                                key={img.id}\r\n                                /* img={img} */\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>                \r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs= (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then( imgs => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            }, 2000);\r\n            \r\n        });\r\n    },[category]);\r\n    \r\n    return state;\r\n\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories=['Serie 1', 'Serie 2', 'Serie 3'];\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                categories.map((category) => (\r\n                    //console.log(category)\r\n                    //return <li key={category}>{category}</li>\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category}/>\r\n                ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}